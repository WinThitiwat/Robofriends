{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","idx","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobot","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92545c45.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = ({name, email, id} ) => { //const Card = (props) => {\r\n    //const {name, email, id} = props;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src = {`https://robohash.org/${id}?20x20`}/>\r\n            <div>\r\n                <h2>{name}</h2>    \r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // const cardComponent = robots.map((user, idx) => {\r\n    //     return (\r\n    //         <Card \r\n    //             key={idx}\r\n    //             id={robots[idx].id} \r\n    //             name={robots[idx].name} \r\n    //             email={robots[idx].email}\r\n    //             />\r\n    //     )\r\n    // })\r\n\r\n    // -- TO TEST ERROR HANDLING, UNCOMMMENT BELOW\r\n    // if (true){\r\n    //     throw new Error(\"NNOOOOO\");\r\n    // }\r\n\r\n    console.log(\"CardList\");\r\n    return (\r\n        <div>\r\n            {/* {cardComponent}; */}\r\n            \r\n            {/* we can either uncomment above and run or execute below directly */}\r\n            {\r\n                robots.map((user, idx) => {\r\n                    return (\r\n                        <Card \r\n                            key={idx}\r\n                            id={robots[idx].id} \r\n                            name={robots[idx].name} \r\n                            email={robots[idx].email}\r\n                            />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchField, searchChange})=>{\r\n    console.log(\"CardList\");\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border:'5px solid black', 'height':'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // change `hasError` state when it sees error (like try catch)\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;\r\n\r\n\r\n// import React, { Component } from 'react';\r\n\r\n// class ErrorBoundary extends Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state = {\r\n//             hasError: false\r\n//         }\r\n//     }\r\n\r\n//     componentDidCatch(error, info){\r\n//         this.setState({hasError:true})\r\n//     }\r\n\r\n//     render(){\r\n//         if (this.state.hasError){\r\n//             return <h1>Oops, this is not good.</h1>\r\n//         }\r\n//         return this.props.children\r\n//     }\r\n// }\r\n\r\n\r\n// export default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.state.count !== nextState.count){\r\n      return true\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return {count: state.count + 1}\r\n    })\r\n  }\r\n\r\n  render(){\r\n    console.log('CounterButton')\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n  // this func comes to every React component\r\n  // It gives us an ability to control this update cycle\r\n  // -- We're forcing for this component never ever update (return false)--\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n  //   return false;\r\n\r\n  // }\r\n\r\n  render(){\r\n    console.log('Header')\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton color={'red'}/>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\nimport {connect} from 'react-redux'; \r\nimport Header from '../components/Header';\r\n\r\n// what state I need to listen to and send it out to prop (this case searchField)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n// what props I should listen to that are action that need to get dispatched\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots()) \r\n    }   \r\n}\r\nclass App extends Component {\r\n    // we don't need the constructor anymore\r\n    // becuz there's no more states, these robots are going to be returned as part of the props from onRequestRobots()\r\n    // this make render change by adding `robots`, `isPending`\r\n    \r\n    // constructor(){ \r\n    //     super()\r\n    //     this.state = {\r\n    //         robots: []\r\n    //         // searchField: \"\" // since Redux can replace the App state, so we dont need this;\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount(){\r\n        // this is called by requestRobots action\r\n        // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        //     .then(response=>response.json())\r\n        //     .then(users =>this.setState({robots: users}));\r\n\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n\r\n    // this's coming down as props, so we  don't need it\r\n    // onSearchChange=(event)=>{\r\n    //     this.setState({searchField: event.target.value})\r\n    // }\r\n    \r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props\r\n        const filteredRobot = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        }) \r\n        if( isPending ){\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n            return(\r\n            <div className='tc'>\r\n                <Header/>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    {/* if CardList(children) goes fails, ErrorBoundary will catch it and have graceful exit boundary  */}\r\n                    <ErrorBoundary> \r\n                        <CardList robots={filteredRobot}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n    \r\n}\r\n// in connect, listen to this part of the state  (mapState), and i'm interested in this action (mapDispatch)\r\n// and then get those props to the App\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch( {type: REQUEST_ROBOTS_PENDING});\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response=>response.json())\r\n            .then(data => dispatch({ \r\n              type: REQUEST_ROBOTS_SUCCESS,\r\n              payload:data})\r\n              )\r\n            .catch(error => dispatch({ \r\n              type: REQUEST_ROBOTS_FAILED, \r\n              payload: error}))\r\n}\r\n\r\n\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\"; \r\n\r\n// constant for requesting robots \r\n// promise with 3 states: pending, success, failed\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n\r\n    default:\r\n      return state;\r\n  }\r\n} \r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true});\r\n\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n    \r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false});\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import Card from './Card.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App.js';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux'; // \r\nimport {searchRobots, requestRobots} from './reducers'; // for Store\r\nimport {createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n\r\n// searchRobots is rootReducer\r\n// applyMiddleware tells what's going in the app when actions happen\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n    // provide Store (all states that is source of all true) from Redux to Connect components to be aware of Redux existence\r\n    <Provider store={store}> \r\n         <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}